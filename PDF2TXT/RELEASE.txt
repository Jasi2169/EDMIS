RELEASE 0.6.8
-Import textfield value now works when there are multiple widgets
-Flush stream when doing FDF import


RELEASE 0.6.7
-Revamped the way character spacing and font information is obtained
-Improved location information about a character drawn on the screen.
-Changed the PDFStreamEngine.showString to showCharacter to support the newly
 improved location information.  This will now only show one character at a time.
-Fixed bug in PDDocument.isOwnerPassword and isUserPassword that was using the
 wrong length for the encryption key.
-Upgraded to ant 1.6.2
-Upgraded to checkstyle-3.4
-Upgraded to JUnit-3.8.1
-Upgraded to lucene-1.4.2
-Integrated patch(1016603) for issue 943319 to fix parsing of open office documents
-Patch:985347 No longer throw exception for "No 'ToUnicode' and no 'Encoding' for Font"
-Patch:996191 Fixed case statement with missing break
-Patch:996781 Fixed null pointer exception in acroform fields
-Renamed DecryptDocument to DocumentEncryption to support encryption and decryption
-Added load/save/encrypt/decrypt convenience methods on the PDDocument class
-COSWriter now attempts to keep object numbers from parsed documents and writes 'free'
 entries in the xref if necessary
-Added the ability to set the word separator on the PDFTextStripper
-Fixed issue where PDFBox would throw an IOException if a PDF was incorrectly missing an endobj tag
-Fixed 918220 where PDFBox would freeze when parsing certain cmap files
-Added initial colorspace support
-Fixed issue where AppendDoc was throwing ClassCastException
-Fixed 1013163 Can't parse filters that use filter abbreviation
-Fixed 1011244 Where encrypting then decrypting was causing a problem
-renamed TextPosition.getWidth to TextPosition.getCombinedHorizontalDisplacement
 to better reflect its actual value
-Fixed 919215 PDFBox now support stream replacement
-Fixed 955043 Added support for 'ETenms-B5-H' encoding
-Fixed 996050 Class Cast exception when importing
-Added support for Font descriptors
-Fixed spacing issues when doing textfield FDF import
-Fixed 1017175 Large number converted when re-written
-Fixed 1029873 PDFBox now allows for multiple xref sections
-Added support for document Viewer Preferences
-Made currentDocument and pdfDocument protected in util.Splitter to allow easier subclassing
-Fixed 1034427 After Splitting page orientation is lost
-Added the following command line applications
    +org.pdfbox.Encrypt
    +org.pdfbox.Decrypt
    +org.pdfbox.ImportFDF
    +org.pdfbox.ImportXFDF
    +org.pdfbox.ExportFDF
    +org.pdfbox.ExportXFDF
    
RELEASE 0.6.6
-Improved support for setting of checkbox fields(FDF import)
-Added the org.pdfbox.PDFSplit utility to split a single document into many documents
-PDFBox now ignore the Length field that is associated with a stream, it has been
 found to be wrong in some documents.
-Fixed bug when writing out PDF documents and the document contained an non alphabetic
 character such as ( or )
-Fixed bug in PDFont where dictionary encodings where not being processed correctly
-Fixed bug in COSDocument.isEncrypted which was comparing COSNull to the wrong object
-Integrated patch for supporting multiple lines in the appearance stream
-Upgraded to lucene-1.4-final
-org.pdfbox.ExtractText now uses the system encoding as the default encoding instead of
 ISO-8859-1

RELEASE 0.6.5
-Fixed bug in revision 3 encryption algorithm
-added support for CIDFontType0 glyph widths, which fixed issue with spaces
 being during text extraction
-Fixed infinite loop when parsing a corrupt content stream
-Add characterspacing + wordspacing when determining the width of a space character
-Added support for more font types
-refactored the pdmodel.interactive package, form fields use object delegation
 instead of inheritance for the widget, see PDField.getWidget and PDField.getKids
-Fixed bug where an inheritable cropbox would cause stackoverflow exception
-Changed usage of PDField/PDWidget to look like object delegation instead of
 inheritance by adding a PDField.getWidget instead of extending PDWidget
-refactored interactive package, this will break any existing code that uses
 the PDField/PDAnnotation classes.  You will need to adjust your package names!!
-Now uses StandardEncoding as the default encoding
-Bug in AppendDoc example that did not take into account groups of pages.
-PDFont now also tries the bootstrap classloader when loading AFM resources
-added -startPage and -endPage command line options to org.pdfbox.ExtractText
-Added support for corrupt PDFs with garbage before the header
-Fixed bug where there was whitespace instead of garbage characters in front
 of the first object
-performance improvements for the Matrix implementation
-upgraded to lucene 1.3
-fixed bug in cmap parser for cmap files that all ended in 'def'
-Removed createObject method from COSDocument, COSWriter will handle all object
 references for you.
-Updated AppendDoc to use PDDocument instead of COSDocument and a couple bug fixes
-PDFParser now closes the document if there were parse errors
-TextPosition now has the PDFont that is associated with the piece of text
-Added initial version of org.pdfbox.PDFViewer, a GUI application to view the
 internal structure of a PDF document.  This can be used for debugging purposes at
 this time but may end up being a Adobe Reader like application if there is enough
 interest.
-Changed COSNumber/COSInteger/COSFloat interface to have both intValue and longValue.
-Added methods isUserPassword & isOwnerPassword to PDDocument
-Added cmap files for CJK languages, please give me some feedback


RELEASE 0.6.4
-Fixed bug which caused infinite loop
-Fixed bug in encoding where DictionaryEncoding kept a reference instead of
 making a copy leading to encoding problems
-Added PDFTextStripper.(get|set)PageSeparator, which will allow the user
 to output a string after every page.
-refactored text stripping code to separate the logic processing of PDF operators
 and the logic of extracting text
-ran findbugs on source code and fixed a couple minor issues
-Refactored font functionality to PDFont, some API methods are no longer available in COSObject.
-changed name of org.pdfbox.Main to org.pdfbox.ExtractText
-added contribution of org.pdfbox.Overlay from Mario Ivankovits
-added log.isDebugEnabled checks to log4j calls
-added better escaping when writing COSNames
-fixed bug where encryption dictionary is sometimes set to COSNull instead of not being present


RELEASE 0.6.3
-Now contains the ability to import/set FDF data thanks to a contribution
 from Stefan Uldum Grinsted
-No longer throw an error when stream is not followed by 0A or 0D0A to
 allow more PDFs to be parsed
-Added -encoding argument to org.pdfbox.Main to control the encoding of the
 output
-Remove Prev entry from trailer if it exists because PDFBox automatically
 clears all old entries, only an issue when modifying/saving an existing
 PDF document
-Fixed bug in master password encryption algorithm for Revision 3 encrypted
 documents
-COSString no longer uses UTF-8 when encoding the byte array.
-Added PDDocument.getPageCount()
-Fixed bug in PDFEncryption
-Now enforces text extraction permissions


RELEASE 0.6.2
-Modified build so that build.properties settings are no longer required
-Added required libraries to CVS
-Added log4j logging
-Significant text extraction work
-Added automatic handling of files encrypted with the empty password
-Added automated tests and test data for text extraction
-Removed unimplemented decoders from filters test
-Fixed several LZW decode bugs introduced after 0.5.6
-Fixed bugs relating to processing out of spec PDF's with bad # escaping in
    the name ("java.io.IOException: Error: expected hex number" bug)
-Fixed Lucene UID generation bug
-Fixed GetFontWidths null pointer exception bug

RELEASE 0.6.1
-Fixed bug in parsing stream objects which led to "Unexpected end of ZLIB
 input stream"
-Changed license from LGPL to BSD to allow pdfbox to be used easily
 in Apache projects.

RELEASE 0.6.0
-Massive improvements to memory footprint.
-Must call close() on the COSDocument(LucenePDFDocument does this for you)
-Really fixed the bug where small documents were not being indexed.
-Fixed bug where no whitespace existed between obj and start of object.
    Exception in thread "main" java.io.IOException: expected='obj'
    actual='obj<</Pro
-Fixed issue with spacing where textLineMatrix was not being copied
 properly
-Fixed 'bug' where parsing would fail with some pdfs with double endobj
 definitions
-Added PDF document summary fields to the lucene document

RELEASE 0.5.6
-Fixed bug in LucenePDFDocument where stream was not being closed and small
 documents were not being indexed.
-Fixed a spacing issue for some PDF documents.
-Fixed error while parsing the version number
-Fixed NullPointer in persistence example.
-Create example lucene IndexFiles class which models the demo from lucene.
-Fixed bug where garbage at the end of file caused an infinite loop
-Fixed bug in parsing boolean values with stuff at the end like "true>>"

RELEASE 0.5.5
-Added example of printing document signature
-Added example to print out form fields values
-Fixed bug when appending documents
-Various other bug fixes

RELEASE 0.5.1
-Fixed bug with empty LZW stream
-Fixed bug where ID tag was not properly getting the byte for the image